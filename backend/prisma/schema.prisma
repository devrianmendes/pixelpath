// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//yarn prisma migrate dev

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Costumer {
  id String @db.VarChar @id @default(uuid())
  name String @db.VarChar
  surname String @db.VarChar
  cpf String @db.VarChar
  mobile String @db.VarChar
  email String @db.VarChar
  password String @db.VarChar
  createdAt DateTime @db.Date @default(now())
  updatedAt DateTime @db.Date @default(now())

  roleId String @db.VarChar
  role Role @relation(fields: [roleId], references: [id])

  addresses Address[]
  paymentData PaymentData[]
  orders Order[]
  cart Cart[]
  @@map("costumers")
}

model Product {
  id String @db.VarChar @id @default(uuid())
  name String @db.VarChar
  description String @db.VarChar
  costPrice Decimal @db.Decimal 
  sellPrice Decimal @db.Decimal
  banner String @db.VarChar
  quantity Int @db.Integer
  discountRate Int @db.Integer
  published Boolean @db.Boolean
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now())

  productDetails ProductDetails[]
  productSales SalesInfo[]
  cart Cart[]

  categoryId String @db.VarChar
  category Category @relation(fields: [categoryId], references: [id])
  @@map("products")
}

model Order {
  id String @db.VarChar @id @default(uuid())
  total Decimal @db.Decimal
  status String @db.VarChar
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  costumers Costumer @relation(fields: [costumerId], references: [id])
  costumerId String @db.VarChar

  Addresses Address @relation(fields: [addressId], references: [id])
  addressId String @db.VarChar

  paymentData PaymentData @relation(fields: [paymentDataId], references: [id])
  paymentDataId String @db.VarChar

  cart Cart[]

  @@map("orders")
}

model Cart {
  id String @id @db.VarChar @default(uuid())
  total Decimal @db.Decimal

  productId String @db.VarChar
  products Product @relation(fields: [productId], references: [id])
  
  orderId String @db.VarChar
  order Order @relation(fields: [orderId], references: [id])

  costumerId String @db.VarChar
  costumer Costumer @relation(fields: [costumerId], references: [id])

  @@map("carts")
}

//secondary tables

model Role {
  id String @db.VarChar @id @default(uuid())
  name String @db.VarChar

  costumers Costumer[]
  @@map("roles")
}

model Address {
  id String @db.VarChar @id @default(uuid())
  address String @db.VarChar
  number String @db.VarChar
  city String @db.VarChar
  state String @db.VarChar
  cep Int @db.Integer

  costumerId String @db.VarChar
  costumer Costumer @relation(fields: [costumerId], references: [id])

  orders Order[]

  @@map("addresses")
}

model PaymentData {
  id String @db.VarChar @id @default(uuid()) 
  provider String @db.VarChar
  number String @db.VarChar
  expireDate DateTime @db.Date
  isDefault Boolean @db.Boolean
  createdAt DateTime @default(now())

  costumers Costumer @relation(fields: [costumerId], references: [id])
  costumerId String @db.VarChar

  paymentMethods PaymentMethod @relation(fields: [paymentMethodId], references: [type])
  paymentMethodId String @db.VarChar

  orders Order[]
  @@map("paymentDatas")

}

model PaymentMethod {
  type String @db.VarChar @id
  paymentDatas PaymentData[]
}

model ProductDetails {
  id String @db.VarChar @id @default(uuid())
  weight Int @db.Integer
  height Int @db.Integer
  width Int @db.Integer
  length Int @db.Integer
  manufacturer String @db.VarChar

  productId String @db.VarChar
  products Product @relation(fields: [productId], references: [id])

  @@map("productDetails")
}

model SalesInfo {
  sales Int @db.Integer
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  productId String @db.VarChar @id

  @@map("salesInfos")
}

model Category {
  id String @db.VarChar @id @default(uuid())
  name String @db.VarChar

  parentCategoryId String? @db.VarChar
  parentCategory Category? @relation("parentCategories",fields: [parentCategoryId], references: [id])
  childCategory Category[] @relation("parentCategories")

  products Product[]
  promotions CategoryPromotion[]
  @@map("categories")
}

model Promotion {
  id String @db.VarChar @id @default(uuid())
  name String @db.VarChar
  description String @db.VarChar
  discoutRate Int @db.Integer
  startDate DateTime @db.Date
  endDate DateTime @db.Date
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  categories CategoryPromotion[]
  @@map("promotions")
}

model CategoryPromotion {
  id String @db.VarChar @id @default(uuid())
  name String @db.VarChar

  categoryId String @db.VarChar
  categories Category @relation(fields: [categoryId], references: [id])

  promotionId String @db.VarChar
  promotions Promotion @relation(fields: [promotionId], references: [id])

  @@map("categoryPromotions")
}